from flask import Flask, request, jsonify, Response, render_template
import json
from functools import wraps
from trackleaders import get_breaks, get_racer_id, get_racers, get_race_name
import util
import config
import cache

app = Flask(__name__)

BAD_REQUEST = Response(status='405') 
MAX_NUM_LEN = 20
MAIN_DIGEST = util.digest('static/main.js')
# 30 minutes
CACHE_DUR = 1800

def cache_json(view):
    '''
    cache a json response
    '''
    @wraps(view)
    def decorated_view(*args, **kwargs):
        # most of the traffic is generated by client side's API call
        # and url of which are fixed
        cached = cache.get(request.url)
        if cached is not None:
            resp = Response(cached, content_type='application/json')
        else:
            resp = view(*args, **kwargs)
            cache.set(request.url, resp.data, timeout=CACHE_DUR)
        resp.cache_control.max_age = CACHE_DUR
        return resp

    return decorated_view



@app.route('/<race_id>')
def home(race_id):
    return render_template('index.html',
            race_id=race_id,
            race_name=get_race_name(race_id),
            main_digest=MAIN_DIGEST)


@app.route('/breaks/<race_id>')
@cache_json
def show_breaks(race_id):
    if 'name' not in request.args:
        return BAD_REQUEST
    racer_name = request.args['name']
    racer_id = get_racer_id(racer_name)
    breaks, tot_duration = get_breaks(race_id, racer_id)
    feed = {
        'raceId': race_id,
        'racerId': racer_id,
        'racerName': racer_name, 
        'breaks': breaks,
        'totalDuration': to_comparablee_string(tot_duration)
    }
    return jsonify(feed)


@app.route('/racers/<race_id>')
@cache_json
def show_racers(race_id):
    feed = {
        'raceId': race_id,
        'racers': get_racers(race_id)
    }
    return jsonify(feed)


def to_comparablee_string(num):
    s = str(int(num))
    return '0'*(MAX_NUM_LEN - len(s))+s


if __name__ == '__main__':
    app.run(debug=True)
